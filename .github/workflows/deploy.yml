name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  GO_VERSION: "1.24.4"
  BINARY_NAME: btwarch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w -X main.version=${{ github.sha }}" \
            -o ${{ env.BINARY_NAME }}_linux_amd64 \
            ./cmd/app/main.go

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.REMOTE_HOST }}
          SSH_USER: ${{ secrets.REMOTE_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          cat > ~/.ssh/config <<EOF
          Host $SSH_HOST
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          DEPLOY_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ssh $SSH_USER@$SSH_HOST 'mkdir -p ~/btwarch/app/backups'
          ssh $SSH_USER@$SSH_HOST "if [ -f ~/btwarch/app/${{ env.BINARY_NAME }}_linux_amd64 ]; then cp ~/btwarch/app/${{ env.BINARY_NAME }}_linux_amd64 ~/btwarch/app/backups/${{ env.BINARY_NAME }}_linux_amd64.backup.$DEPLOY_TIMESTAMP; fi"

          scp ${{ env.BINARY_NAME }}_linux_amd64 $SSH_USER@$SSH_HOST:~/btwarch/app/
          ssh $SSH_USER@$SSH_HOST "chmod +x ~/btwarch/app/${{ env.BINARY_NAME }}_linux_amd64"

          ssh $SSH_USER@$SSH_HOST 'sudo systemctl restart btwarch'

          sleep 5
          ssh $SSH_USER@$SSH_HOST 'systemctl is-active --quiet btwarch || (echo "Service failed to start" && exit 1)'
          ssh $SSH_USER@$SSH_HOST 'curl -f http://localhost:8080/health || (echo "Health check failed" && exit 1)'

          rm -f ~/.ssh/deploy_key ~/.ssh/config

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful to ${{ secrets.SSH_HOST }}"
          else
            echo "❌ Deployment failed to ${{ secrets.SSH_HOST }}"
          fi

name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GO_VERSION: "1.24.4"
  BINARY_NAME: btwarch

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o ${{ env.BINARY_NAME }}_linux_amd64 \
            ./cmd/app/main.go

      - name: Configure SSH and Deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          cat > ~/.ssh/config <<EOF
          Host $SSH_HOST
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          # Ensure target directory exists and create backup
          ssh $SSH_USER@$SSH_HOST 'mkdir -p ~/btwarch/app/backups'
          ssh $SSH_USER@$SSH_HOST 'if [ -f ~/btwarch/app/btwarch_linux_amd64 ]; then cp ~/btwarch/app/btwarch_linux_amd64 ~/btwarch/app/backups/btwarch_linux_amd64.backup.$(date +%Y%m%d_%H%M%S); fi'

          # Deploy new binary
          scp ${{ env.BINARY_NAME }}_linux_amd64 $SSH_USER@$SSH_HOST:~/btwarch/app/
          ssh $SSH_USER@$SSH_HOST 'chmod +x ~/btwarch/app/btwarch_linux_amd64'

          # Restart services
          ssh $SSH_USER@$SSH_HOST 'sudo systemctl restart btwarch'
          ssh $SSH_USER@$SSH_HOST 'sudo systemctl reload nginx'

          # Verify services are running
          ssh $SSH_USER@$SSH_HOST 'systemctl is-active --quiet btwarch || (echo "btwarch service failed to start" && exit 1)'
          ssh $SSH_USER@$SSH_HOST 'systemctl is-active --quiet nginx || (echo "nginx service failed to start" && exit 1)'

          # Cleanup
          rm -f ~/.ssh/deploy_key ~/.ssh/config
